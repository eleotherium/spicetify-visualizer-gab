"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const glob_1 = __importDefault(require("glob"));
const chalk_1 = __importDefault(require("chalk"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const minify_1 = require("./helpers/minify");
const esbuild_1 = __importDefault(require("esbuild"));
const os_1 = __importDefault(require("os"));
exports.default = async (settings, outDirectory, watch, esbuildOptions, minify, inDirectory) => {
    // const extension = path.join("./src/", "app.tsx")
    // const extensionName = path.basename(extension.substring(0, extension.lastIndexOf(".")));
    const compiledExtension = path_1.default.join(outDirectory, `${settings.nameId}.js`);
    const compiledExtensionCSS = path_1.default.join(outDirectory, `${settings.nameId}.css`);
    const appPath = path_1.default.resolve(glob_1.default.sync(`${inDirectory}/*(app.ts|app.tsx|app.js|app.jsx)`)[0]);
    const tempFolder = path_1.default.join(os_1.default.tmpdir(), "spicetify-creator");
    const indexPath = path_1.default.join(tempFolder, `index.jsx`);
    if (!fs_1.default.existsSync(tempFolder))
        fs_1.default.mkdirSync(tempFolder);
    fs_1.default.writeFileSync(indexPath, `
import main from \'${appPath.replace(/\\/g, "/")}\'

(async () => {
  await main()
})();
  `.trim());
    esbuild_1.default.build(Object.assign(Object.assign({ entryPoints: [indexPath], outfile: compiledExtension }, esbuildOptions), { watch: (watch ? {
            async onRebuild(error, result) {
                if (error)
                    console.error(error);
                else {
                    await afterBundle();
                }
            },
        } : undefined) })).then(async (r) => {
        await afterBundle();
        return r;
    });
    const afterBundle = async () => {
        if (fs_1.default.existsSync(compiledExtensionCSS)) {
            console.log("Bundling css and js...");
            let css = fs_1.default.readFileSync(compiledExtensionCSS, "utf-8");
            if (minify) {
                css = await (0, minify_1.minifyCSS)(css);
            }
            fs_1.default.rmSync(compiledExtensionCSS);
            fs_1.default.appendFileSync(compiledExtension, `
  
  (async () => {
    if (!document.getElementById(\`${esbuildOptions.globalName}\`)) {
      var el = document.createElement('style');
      el.id = \`${esbuildOptions.globalName}\`;
      el.textContent = (String.raw\`
  ${css}
      \`).trim();
      document.head.appendChild(el);
    }
  })()
  
      `.trim());
        }
        // Account for dynamic hooking of React and ReactDOM
        fs_1.default.writeFileSync(compiledExtension, `
      (async function() {
        while (!Spicetify.React || !Spicetify.ReactDOM) {
          await new Promise(resolve => setTimeout(resolve, 10));
        }
        ${fs_1.default.readFileSync(compiledExtension, "utf-8")}
      })();
    `.trim());
        if (minify) {
            console.log("Minifying...");
            await (0, minify_1.minifyFile)(compiledExtension);
        }
        console.log(chalk_1.default.green('Build succeeded.'));
    };
};
